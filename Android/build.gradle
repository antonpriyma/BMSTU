// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.70'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }
    ext {
        application_id = "io.github.patrickyin.cleanarchitecture"
        test_runner = "androidx.test.runner.AndroidJUnitRunner"
        compile_sdk_version = 28
        mini_sdk_version = 21
        target_sdk_version = 28
        version_code = 1
        version_name = "1.0"

        androidx_version = '1.1.0-alpha03'
        constraint_layout_version = '1.1.3'
        retrofit2_version = "2.5.0"
        okhttp3_version = "3.14.1"
        dagger2_vesion = "2.21"
        gson_version = "2.8.5"
        rxjava2_version = "2.2.7"
        rxandroid_version = "2.1.1"
        junit_version = "4.12"
        mockito_version = "2.8.9"
        powermock_version = "1.7.1"
        test_runner_version = '1.1.0-alpha4'
        espresso_version = '3.1.0-alpha4'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

signingConfigs {
    debug { /* здесь никаких изменений нет */ }
    release {
        if (project.hasProperty("Keys.repo")) {
            def projectPropsFile = file(project.property("Keys.repo") + "/exchanger.properties")
            if (projectPropsFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(projectPropsFile))
                storeFile file(file(project.property("Keys.repo") + props['RELEASE_STORE_FILE']))
                storePassword props['RELEASE_STORE_PASS']
                keyAlias props['RELEASE_ALIAS']
                keyPassword props['RELEASE_KEY_PASS']
            }
        } else {
            println "======================================================="
            println "[ERROR] - Please configure release-compilation environment - e.g. in ~/.signing directory"
            println "======================================================="
        }
    }
}